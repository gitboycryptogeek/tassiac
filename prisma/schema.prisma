// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Changed for SQLite development
  url      = env("DATABASE_URL_PRISMA")
}

// --------------- User and Auth Models ---------------
model User {
  id                      Int                     @id @default(autoincrement())
  username                String                  @unique
  password                String
  fullName                String                  @map("fullName")
  email                   String?                 @unique
  phone                   String                  @unique
  isAdmin                 Boolean                 @default(false) @map("isAdmin")
  role                    String?
  lastLogin               DateTime?               @map("lastLogin")
  resetToken              String?                 @map("resetToken")
  resetTokenExpiry        DateTime?               @map("resetTokenExpiry")
  isActive                Boolean                 @default(true) @map("isActive")
  createdAt               DateTime                @default(now()) @map("createdAt")
  updatedAt               DateTime                @updatedAt @map("updatedAt")
  payments                Payment[]               @relation("UserPayments")
  processedPayments       Payment[]               @relation("PaymentProcessor")
  createdSpecialOfferings SpecialOffering[]       @relation("SpecialOfferingCreator")
  initiatedAdminActions   AdminAction[]           @relation("Initiator")
  approvedAdminActions    AdminActionApproval[]   @relation("AdminApprover")
  notifications           Notification[]          @relation("UserNotifications")
  receipts                Receipt[]               @relation("UserReceipts")
  generatedReceipts       Receipt[]               @relation("ReceiptGenerator")
  submittedContactInquiries ContactInquiry[]      @relation("SubmittedByUser")
  handledContactInquiries ContactInquiry[]        @relation("HandledByAdmin")
  
  // New wallet and batch payment relations
  batchPaymentsCreated    BatchPayment[]          @relation("BatchPaymentCreator")
  batchPaymentsProcessed  BatchPayment[]          @relation("BatchPaymentProcessor")
  withdrawalRequests      WithdrawalRequest[]     @relation("WithdrawalRequester")
  withdrawalApprovals     WithdrawalApproval[]    @relation("WithdrawalApprover")

  @@map("Users")
}

model AdminAction {
  id                Int                     @id @default(autoincrement())
  actionType        String                  @map("actionType")
  targetId          String                  @map("targetId")
  actionData        Json?                   @map("actionData")
  status            String                  @default("COMPLETED")
  initiatedById     Int                     @map("initiatedById")
  initiator         User                    @relation("Initiator", fields: [initiatedById], references: [id])
  createdAt         DateTime                @default(now()) @map("createdAt")
  updatedAt         DateTime                @updatedAt @map("updatedAt")
  approvals         AdminActionApproval[]

  @@map("AdminActions")
}

model AdminActionApproval {
  id            Int          @id @default(autoincrement())
  adminActionId Int          @map("adminActionId")
  adminAction   AdminAction  @relation(fields: [adminActionId], references: [id])
  adminId       Int          @map("adminId")
  admin         User         @relation("AdminApprover", fields: [adminId], references: [id])
  approved      Boolean
  comment       String?
  createdAt     DateTime     @default(now()) @map("createdAt")
  updatedAt     DateTime     @updatedAt @map("updatedAt")

  @@map("AdminActionApprovals")
}

// --------------- Financial Models ---------------
model SpecialOffering {
  id            Int       @id @default(autoincrement())
  offeringCode  String    @unique @map("offeringCode")
  name          String
  description   String?
  targetAmount  Float?    @map("targetAmount")
  startDate     DateTime  @default(now()) @map("startDate")
  endDate       DateTime? @map("endDate")
  isActive      Boolean   @default(true) @map("isActive")
  customFields  Json?     @map("customFields")
  createdById   Int       @map("createdById")
  creator       User      @relation("SpecialOfferingCreator", fields: [createdById], references: [id])
  contributions Payment[] @relation("SpecialOfferingContributions")
  createdAt     DateTime  @default(now()) @map("createdAt")
  updatedAt     DateTime  @updatedAt @map("updatedAt")

  @@map("SpecialOfferings")
}

model Payment {
  id                   Int               @id @default(autoincrement())
  userId               Int               @map("userId")
  user                 User              @relation("UserPayments", fields: [userId], references: [id])
  amount               Float             @map("amount")
  paymentType          String            @map("paymentType")
  paymentMethod        String            @map("paymentMethod")
  description          String?
  reference            String?
  transactionId        String?           @unique @map("transactionId")
  status               String            @default("COMPLETED")
  receiptNumber        String?           @unique @map("receiptNumber")
  paymentDate          DateTime          @default(now()) @map("paymentDate")
  platformFee          Float             @default(0.00) @map("platformFee")
  titheDistributionSDA Json?             @map("titheDistributionSDA") // Now stores amounts instead of booleans: {"campMeetingExpenses": 200, "welfare": 300, ...}
  isExpense            Boolean           @default(false) @map("isExpense")
  department           String?
  expenseReceiptUrl    String?           @map("expenseReceiptUrl")
  processedById        Int?
  processor            User?             @relation("PaymentProcessor", fields: [processedById], references: [id])
  specialOfferingId    Int?              @map("specialOfferingId")
  specialOffering      SpecialOffering?  @relation("SpecialOfferingContributions", fields: [specialOfferingId], references: [id])
  isTemplate           Boolean?          @default(false) @map("isTemplate")
  targetGoal           Float?            @map("targetGoal")
  
  // New batch payment fields
  batchPaymentId       Int?              @map("batchPaymentId")
  batchPayment         BatchPayment?     @relation(fields: [batchPaymentId], references: [id])
  isBatchProcessed     Boolean           @default(false) @map("isBatchProcessed")
  
  // New KCB integration fields
  kcbTransactionId     String?           @map("kcbTransactionId")
  kcbReference         String?           @map("kcbReference")
  bankDepositStatus    String?           @default("PENDING") @map("bankDepositStatus") // PENDING, DEPOSITED, FAILED
  
  createdAt            DateTime          @default(now()) @map("createdAt")
  updatedAt            DateTime          @updatedAt @map("updatedAt")
  receipt              Receipt?

  @@map("Payments")
}

// New Batch Payment Model
model BatchPayment {
  id                Int       @id @default(autoincrement())
  batchReference    String    @unique @map("batchReference")
  totalAmount       Float     @map("totalAmount")
  totalCount        Int       @map("totalCount")
  status            String    @default("PENDING") @map("status") // PENDING, DEPOSITED, COMPLETED, FAILED
  description       String?
  createdById       Int       @map("createdById")
  creator           User      @relation("BatchPaymentCreator", fields: [createdById], references: [id])
  processedById     Int?      @map("processedById")
  processor         User?     @relation("BatchPaymentProcessor", fields: [processedById], references: [id])
  kcbTransactionId  String?   @map("kcbTransactionId")
  kcbReference      String?   @map("kcbReference")
  depositedAt       DateTime? @map("depositedAt")
  createdAt         DateTime  @default(now()) @map("createdAt")
  updatedAt         DateTime  @updatedAt @map("updatedAt")
  
  payments          Payment[]

  @@map("BatchPayments")
}

// New Wallet Model
model Wallet {
  id              Int     @id @default(autoincrement())
  walletType      String  @map("walletType") // TITHE, OFFERING, DONATION, SPECIAL_OFFERING
  subType         String? @map("subType") // For tithe: campMeetingExpenses, welfare, etc. For special offerings: offering code
  balance         Float   @default(0) @map("balance")
  totalDeposits   Float   @default(0) @map("totalDeposits")
  totalWithdrawals Float  @default(0) @map("totalWithdrawals")
  lastUpdated     DateTime @default(now()) @map("lastUpdated")
  isActive        Boolean @default(true) @map("isActive")
  
  // Metadata for special offerings
  specialOfferingId Int? @map("specialOfferingId")
  
  createdAt       DateTime @default(now()) @map("createdAt")
  updatedAt       DateTime @updatedAt @map("updatedAt")
  
  withdrawalRequests WithdrawalRequest[]

  @@unique([walletType, subType])
  @@map("Wallets")
}

// New Withdrawal Request Model
model WithdrawalRequest {
  id                Int       @id @default(autoincrement())
  withdrawalReference String  @unique @map("withdrawalReference")
  walletId          Int       @map("walletId")
  wallet            Wallet    @relation(fields: [walletId], references: [id])
  amount            Float
  purpose           String
  description       String?
  requestedById     Int       @map("requestedById")
  requester         User      @relation("WithdrawalRequester", fields: [requestedById], references: [id])
  status            String    @default("PENDING") @map("status") // PENDING, APPROVED, REJECTED, COMPLETED
  
  // Withdrawal destination
  withdrawalMethod  String    @map("withdrawalMethod") // BANK_TRANSFER, MPESA, CASH
  destinationAccount String? @map("destinationAccount")
  destinationPhone  String?  @map("destinationPhone")
  
  // KCB transaction details
  kcbTransactionId  String?  @map("kcbTransactionId")
  kcbReference      String?  @map("kcbReference")
  
  // Approval tracking
  requiredApprovals Int      @default(3) @map("requiredApprovals")
  currentApprovals  Int      @default(0) @map("currentApprovals")
  
  processedAt       DateTime? @map("processedAt")
  createdAt         DateTime  @default(now()) @map("createdAt")
  updatedAt         DateTime  @updatedAt @map("updatedAt")
  
  approvals         WithdrawalApproval[]

  @@map("WithdrawalRequests")
}

// New Withdrawal Approval Model
model WithdrawalApproval {
  id                  Int               @id @default(autoincrement())
  withdrawalRequestId Int               @map("withdrawalRequestId")
  withdrawalRequest   WithdrawalRequest @relation(fields: [withdrawalRequestId], references: [id])
  approvedById        Int               @map("approvedById")
  approver            User              @relation("WithdrawalApprover", fields: [approvedById], references: [id])
  approved            Boolean
  password            String?           // For password-based approval
  approvalMethod      String            @map("approvalMethod") // PASSWORD, EMAIL, GOOGLE_AUTH
  comment             String?
  createdAt           DateTime          @default(now()) @map("createdAt")

  @@unique([withdrawalRequestId, approvedById])
  @@map("WithdrawalApprovals")
}

// New KCB Transaction Sync Model
model KcbTransactionSync {
  id                Int      @id @default(autoincrement())
  kcbTransactionId  String   @unique @map("kcbTransactionId")
  kcbReference      String?  @map("kcbReference")
  amount            Float
  transactionDate   DateTime @map("transactionDate")
  description       String?
  transactionType   String   @map("transactionType") // CREDIT, DEBIT
  
  // Sync status
  syncStatus        String   @default("UNLINKED") @map("syncStatus") // UNLINKED, LINKED, IGNORED
  linkedPaymentId   Int?     @map("linkedPaymentId")
  
  // Raw KCB data
  rawData           Json?    @map("rawData")
  
  createdAt         DateTime @default(now()) @map("createdAt")
  updatedAt         DateTime @updatedAt @map("updatedAt")

  @@map("KcbTransactionSyncs")
}

model Receipt {
  id              Int       @id @default(autoincrement())
  receiptNumber   String    @unique @map("receiptNumber")
  paymentId       Int       @unique @map("paymentId")
  payment         Payment   @relation(fields: [paymentId], references: [id])
  userId          Int       @map("userId")
  user            User      @relation("UserReceipts", fields: [userId], references: [id])
  generatedById   Int?      @map("generatedById")
  generator       User?     @relation("ReceiptGenerator", fields: [generatedById], references: [id])
  receiptDate     DateTime  @default(now()) @map("receiptDate")
  receiptData     Json      @map("receiptData")
  pdfPath         String?   @map("pdfPath")
  attachmentPath  String?   @map("attachmentPath")
  createdAt       DateTime  @default(now()) @map("createdAt")
  updatedAt       DateTime  @updatedAt @map("updatedAt")

  @@map("Receipts")
}

// --------------- Notification and Contact Models ---------------
model Notification {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("userId")
  user             User     @relation("UserNotifications", fields: [userId], references: [id])
  notificationType String   @map("notificationType")
  message          String
  reference        String?
  isRead           Boolean  @default(false) @map("isRead")
  status           String   @default("PENDING")
  responseData     Json?    @map("responseData")
  createdAt        DateTime @default(now()) @map("createdAt")
  updatedAt        DateTime @updatedAt @map("updatedAt")

  @@map("Notifications")
}

model ContactInquiry {
  id                Int       @id @default(autoincrement())
  name              String
  email             String
  phone             String?
  subject           String
  message           String
  status            String    @default("PENDING")
  submittedById     Int?
  submittedBy       User?     @relation("SubmittedByUser", fields: [submittedById], references: [id])
  handledById       Int?
  handledBy         User?     @relation("HandledByAdmin", fields: [handledById], references: [id])
  resolutionNotes   String?
  createdAt         DateTime  @default(now()) @map("createdAt")
  updatedAt         DateTime  @updatedAt @map("updatedAt")

  @@map("ContactInquiries")
}