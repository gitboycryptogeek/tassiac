// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Changed for SQLite development
  url      = env("DATABASE_URL_PRISMA")
}

// --------------- User and Auth Models ---------------
model User {
  // ... no changes needed in User model for these errors
  id                      Int                     @id @default(autoincrement())
  username                String                  @unique
  password                String
  fullName                String                  @map("fullName")
  email                   String?                 @unique
  phone                   String                  @unique
  isAdmin                 Boolean                 @default(false) @map("isAdmin")
  role                    String?
  lastLogin               DateTime?               @map("lastLogin")
  resetToken              String?                 @map("resetToken")
  resetTokenExpiry        DateTime?               @map("resetTokenExpiry")
  isActive                Boolean                 @default(true) @map("isActive")
  createdAt               DateTime                @default(now()) @map("createdAt")
  updatedAt               DateTime                @updatedAt @map("updatedAt")
  payments                Payment[]               @relation("UserPayments")
  processedPayments       Payment[]               @relation("PaymentProcessor")
  createdSpecialOfferings SpecialOffering[]       @relation("SpecialOfferingCreator")
  initiatedAdminActions   AdminAction[]           @relation("Initiator")
  approvedAdminActions    AdminActionApproval[]   @relation("AdminApprover")
  notifications           Notification[]          @relation("UserNotifications")
  receipts                Receipt[]               @relation("UserReceipts")
  generatedReceipts       Receipt[]               @relation("ReceiptGenerator")
  submittedContactInquiries ContactInquiry[]      @relation("SubmittedByUser")
  handledContactInquiries ContactInquiry[]        @relation("HandledByAdmin")

  @@map("Users")
}

model AdminAction {
  id                Int                     @id @default(autoincrement())
  actionType        String                  @map("actionType")
  targetId          String                  @map("targetId")
  actionData        Json?                   @map("actionData")
  status            String                  @default("COMPLETED")
  initiatedById     Int                     @map("initiatedById")
  initiator         User                    @relation("Initiator", fields: [initiatedById], references: [id])
  createdAt         DateTime                @default(now()) @map("createdAt")
  updatedAt         DateTime                @updatedAt @map("updatedAt")
  approvals         AdminActionApproval[]

  @@map("AdminActions")
}

model AdminActionApproval {
  id            Int          @id @default(autoincrement())
  adminActionId Int          @map("adminActionId")
  adminAction   AdminAction  @relation(fields: [adminActionId], references: [id])
  adminId       Int          @map("adminId")
  admin         User         @relation("AdminApprover", fields: [adminId], references: [id])
  approved      Boolean
  comment       String?      // Remove @db.Text for SQLite (Line 70)
  createdAt     DateTime     @default(now()) @map("createdAt")
  updatedAt     DateTime     @updatedAt @map("updatedAt")

  @@map("AdminActionApprovals")
}

// --------------- Financial Models ---------------
model SpecialOffering {
  id            Int       @id @default(autoincrement())
  offeringCode  String    @unique @map("offeringCode")
  name          String
  description   String?   // Remove @db.Text for SQLite (Line 83)
  targetAmount  Float?    @map("targetAmount") // Change Decimal to Float (Line 84)
  startDate     DateTime  @default(now()) @map("startDate")
  endDate       DateTime? @map("endDate")
  isActive      Boolean   @default(true) @map("isActive")
  customFields  Json?     @map("customFields")
  createdById   Int       @map("createdById")
  creator       User      @relation("SpecialOfferingCreator", fields: [createdById], references: [id])
  contributions Payment[] @relation("SpecialOfferingContributions")
  createdAt     DateTime  @default(now()) @map("createdAt")
  updatedAt     DateTime  @updatedAt @map("updatedAt")

  @@map("SpecialOfferings")
}

model Payment {
  id                   Int               @id @default(autoincrement())
  userId               Int               @map("userId")
  user                 User              @relation("UserPayments", fields: [userId], references: [id])
  amount               Float             @map("amount") // Change Decimal to Float (Line 106)
  paymentType          String            @map("paymentType")
  paymentMethod        String            @map("paymentMethod")
  description          String?           // Remove @db.Text for SQLite (Line 109)
  reference            String?
  transactionId        String?           @unique @map("transactionId")
  status               String            @default("COMPLETED")
  receiptNumber        String?           @unique @map("receiptNumber")
  paymentDate          DateTime          @default(now()) @map("paymentDate")
  platformFee          Float             @default(0.00) @map("platformFee") // Change Decimal to Float (Line 115)
  titheDistributionSDA Json?             @map("titheDistributionSDA")
  isExpense            Boolean           @default(false) @map("isExpense")
  department           String?
  expenseReceiptUrl    String?           @map("expenseReceiptUrl")
  processedById        Int?
  processor            User?             @relation("PaymentProcessor", fields: [processedById], references: [id])
  specialOfferingId    Int?              @map("specialOfferingId")
  specialOffering      SpecialOffering?  @relation("SpecialOfferingContributions", fields: [specialOfferingId], references: [id])
  isTemplate           Boolean?          @default(false) @map("isTemplate")
  targetGoal           Float?            @map("targetGoal") // Change Decimal to Float (Line 137)
  createdAt            DateTime          @default(now()) @map("createdAt")
  updatedAt            DateTime          @updatedAt @map("updatedAt")
  receipt              Receipt?

  @@map("Payments")
}

model Receipt {
  id              Int       @id @default(autoincrement())
  receiptNumber   String    @unique @map("receiptNumber")
  paymentId       Int       @unique @map("paymentId")
  payment         Payment   @relation(fields: [paymentId], references: [id])
  userId          Int       @map("userId")
  user            User      @relation("UserReceipts", fields: [userId], references: [id])
  generatedById   Int?      @map("generatedById")
  generator       User?     @relation("ReceiptGenerator", fields: [generatedById], references: [id])
  receiptDate     DateTime  @default(now()) @map("receiptDate")
  receiptData     Json      @map("receiptData")
  pdfPath         String?   @map("pdfPath")
  attachmentPath  String?   @map("attachmentPath")
  createdAt       DateTime  @default(now()) @map("createdAt")
  updatedAt       DateTime  @updatedAt @map("updatedAt")

  @@map("Receipts")
}

// --------------- Notification and Contact Models ---------------
model Notification {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("userId")
  user             User     @relation("UserNotifications", fields: [userId], references: [id])
  notificationType String   @map("notificationType")
  message          String   // Remove @db.Text for SQLite (Line 174)
  reference        String?
  isRead           Boolean  @default(false) @map("isRead")
  status           String   @default("PENDING")
  responseData     Json?    @map("responseData")
  createdAt        DateTime @default(now()) @map("createdAt")
  updatedAt        DateTime @updatedAt @map("updatedAt")

  @@map("Notifications")
}

model ContactInquiry {
  id                Int       @id @default(autoincrement())
  name              String
  email             String
  phone             String?
  subject           String
  message           String    // Remove @db.Text for SQLite (Line 192)
  status            String    @default("PENDING")
  submittedById     Int?
  submittedBy       User?     @relation("SubmittedByUser", fields: [submittedById], references: [id])
  handledById       Int?
  handledBy         User?     @relation("HandledByAdmin", fields: [handledById], references: [id])
  resolutionNotes   String?   // Remove @db.Text for SQLite (Line 200)
  createdAt         DateTime  @default(now()) @map("createdAt")
  updatedAt         DateTime  @updatedAt @map("updatedAt")

  @@map("ContactInquiries")
}